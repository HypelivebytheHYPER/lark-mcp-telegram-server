#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MCP Bridge ‡∏î‡πâ‡∏ß‡∏¢ Python (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
"""

import requests
import json
from datetime import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
MCP_URL = "https://lark-mcp-telegram-server.onrender.com/mcp/invoke"
YOUR_APP_TOKEN = "SEkObxgDpaPZbss1T3RlHzamgac"  # App token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
YOUR_TABLE_ID = "tblGhWiw3dzgdsfw"              # Table ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

def call_mcp(tool_name, arguments=None):
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ MCP tool
    
    Args:
        tool_name (str): ‡∏ä‡∏∑‡πà‡∏≠ tool ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
        arguments (dict): ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tool
    
    Returns:
        dict: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å MCP
    """
    if arguments is None:
        arguments = {}
    
    payload = {
        "jsonrpc": "2.0",
        "id": f"python_client_{datetime.now().strftime('%H%M%S')}",
        "method": "tools/call",
        "params": {
            "name": tool_name,
            "arguments": arguments
        }
    }
    
    try:
        response = requests.post(MCP_URL, json=payload, timeout=30)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        return {"error": f"Connection error: {str(e)}"}
    except json.JSONDecodeError as e:
        return {"error": f"JSON decode error: {str(e)}"}

def get_available_tools():
    """‡∏î‡∏π‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"""
    print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
    
    payload = {
        "jsonrpc": "2.0",
        "id": "tools_list",
        "method": "tools/list",
        "params": {}
    }
    
    try:
        response = requests.post(MCP_URL, json=payload, timeout=10)
        result = response.json()
        
        if 'result' in result and 'tools' in result['result']:
            tools = result['result']['tools']
            print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(tools)} ‡∏ï‡∏±‡∏ß:")
            for i, tool in enumerate(tools, 1):
                print(f"   {i}. {tool['name']}")
                print(f"      üìù {tool['description']}")
            return tools
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÑ‡∏î‡πâ")
            return []
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return []

def list_bitable_tables():
    """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Bitable"""
    print(f"\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å Bitable...")
    
    result = call_mcp("list_bitable_tables", {
        "app_token": YOUR_APP_TOKEN
    })
    
    if 'result' in result:
        data = result['result']
        if 'tables' in data:
            tables = data['tables']
            print(f"‚úÖ ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á:")
            for i, table in enumerate(tables, 1):
                name = table.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')
                table_id = table.get('table_id', 'N/A')
                print(f"   {i}. {name}")
                print(f"      üÜî {table_id}")
                if table_id == YOUR_TABLE_ID:
                    print(f"      üéØ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!")
            return tables
        else:
            print("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", json.dumps(data, indent=2, ensure_ascii=False))
    else:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", result.get('error', 'Unknown error'))
    
    return []

def search_table_records():
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
    print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á {YOUR_TABLE_ID}...")
    
    result = call_mcp("bitable.v1.appTableRecord.search", {
        "app_token": YOUR_APP_TOKEN,
        "table_id": YOUR_TABLE_ID
    })
    
    if 'result' in result:
        data = result['result']
        if 'items' in data:
            records = data['items']
            print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(records)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
            
            for i, record in enumerate(records[:3], 1):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                print(f"\n   üìÑ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i}:")
                print(f"      üÜî Record ID: {record.get('record_id', 'N/A')}")
                
                fields = record.get('fields', {})
                print(f"      üìù ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(fields)} ‡∏ü‡∏¥‡∏•‡∏î‡πå:")
                
                for field_id, value in list(fields.items())[:3]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏£‡∏Å
                    value_str = str(value)[:50]
                    if len(str(value)) > 50:
                        value_str += "..."
                    print(f"         ‚Ä¢ {field_id}: {value_str}")
                
                if len(fields) > 3:
                    print(f"         ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(fields) - 3} ‡∏ü‡∏¥‡∏•‡∏î‡πå")
            
            if len(records) > 3:
                print(f"\n   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(records) - 3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            return records
        else:
            print("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:", json.dumps(data, indent=2, ensure_ascii=False)[:500])
    else:
        error = result.get('error', {})
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î {error.get('code', 'N/A')}: {error.get('message', 'Unknown error')}")
    
    return []

def list_departments():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print(f"\nüè¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å...")
    
    result = call_mcp("list_departments", {})
    
    if 'result' in result:
        data = result['result']
        if 'items' in data:
            departments = data['items']
            print(f"‚úÖ ‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(departments)} ‡πÅ‡∏ú‡∏ô‡∏Å:")
            for i, dept in enumerate(departments, 1):
                name = dept.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')
                dept_id = dept.get('department_id', 'N/A')
                member_count = dept.get('member_count', 0)
                print(f"   {i}. {name}")
                print(f"      üÜî {dept_id} | üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member_count} ‡∏Ñ‡∏ô")
            return departments
        else:
            print("üè¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", json.dumps(data, indent=2, ensure_ascii=False))
    else:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", result.get('error', 'Unknown error'))
    
    return []

def create_sample_record():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)"""
    print(f"\n‚ûï ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ", end="")
    choice = input().lower().strip()
    
    if choice == 'y':
        print("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...")
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á
        sample_data = {
            "app_token": YOUR_APP_TOKEN,
            "table_id": YOUR_TABLE_ID,
            "fields": {
                "text_field": f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                "number_field": 42
            }
        }
        
        result = call_mcp("bitable.v1.appTableRecord.create", sample_data)
        
        if 'result' in result:
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", json.dumps(result['result'], indent=2, ensure_ascii=False))
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ:", result.get('error', 'Unknown error'))

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üéØ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà MCP Bridge Testing Tool!")
    print("=" * 50)
    
    print("\nüîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    print(f"üì° Server: {MCP_URL}")
    print(f"üìä App Token: {YOUR_APP_TOKEN}")
    print(f"üìã Table ID: {YOUR_TABLE_ID}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    try:
        response = requests.get("https://lark-mcp-telegram-server.onrender.com/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        else:
            print(f"‚ö†Ô∏è Server ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö status code: {response.status_code}")
    except:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ server ‡πÑ‡∏î‡πâ")
        return
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
    print("\n" + "=" * 50)
    
    # 1. ‡∏î‡∏π‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    tools = get_available_tools()
    
    # 2. ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô Bitable
    tables = list_bitable_tables()
    
    # 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    records = search_table_records()
    
    # 4. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å
    departments = list_departments()
    
    # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    create_sample_record()
    
    print("\n" + "=" * 50)
    print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö {len(tools)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠, {len(tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á, {len(records)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, {len(departments)} ‡πÅ‡∏ú‡∏ô‡∏Å")
    print("\nüìñ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: docs/‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡πÑ‡∏ó‡∏¢.md")

if __name__ == "__main__":
    main()
